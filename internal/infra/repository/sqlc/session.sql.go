// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO user_sessions (uuid,
                           user_uuid,
                           refresh_token,
                           user_agent,
                           client_ip,
                           is_blocked,
                           expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING uuid, user_uuid, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionParams struct {
	Uuid         uuid.UUID
	UserUuid     uuid.UUID
	RefreshToken string
	UserAgent    string
	ClientIp     string
	IsBlocked    bool
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Uuid,
		arg.UserUuid,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i UserSession
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSessionByID = `-- name: GetSessionByID :one
SELECT uuid, user_uuid, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
FROM user_sessions
WHERE uuid = $1
`

func (q *Queries) GetSessionByID(ctx context.Context, argUuid uuid.UUID) (UserSession, error) {
	row := q.db.QueryRowContext(ctx, getSessionByID, argUuid)
	var i UserSession
	err := row.Scan(
		&i.Uuid,
		&i.UserUuid,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
