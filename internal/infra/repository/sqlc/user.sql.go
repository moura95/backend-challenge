// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, name)
VALUES ($1, $2,$3)
RETURNING uuid, name, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Email    string
	Password string
	Name     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Name)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT uuid, name, email, password, created_at, updated_at
FROM users
WHERE users.uuid = $1
`

func (q *Queries) GetUserByID(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, argUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPasswordByID = `-- name: GetUserPasswordByID :one
SELECT password
FROM users
WHERE uuid = $1
`

func (q *Queries) GetUserPasswordByID(ctx context.Context, argUuid uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByID, argUuid)
	var password string
	err := row.Scan(&password)
	return password, err
}

const removeUserByID = `-- name: RemoveUserByID :one
DELETE
FROM users
WHERE uuid = $1
RETURNING uuid, name, email, password, created_at, updated_at
`

func (q *Queries) RemoveUserByID(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, removeUserByID, argUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserByUUID = `-- name: UpdateUserByUUID :exec
UPDATE users
SET
    name   = COALESCE($2, name),
    email = COALESCE($3, email),
    updated_at = NOW()
WHERE uuid = $1
`

type UpdateUserByUUIDParams struct {
	Uuid  uuid.UUID
	Name  sql.NullString
	Email sql.NullString
}

func (q *Queries) UpdateUserByUUID(ctx context.Context, arg UpdateUserByUUIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByUUID, arg.Uuid, arg.Name, arg.Email)
	return err
}
