// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, name)
VALUES ($1, $2, $3)
RETURNING uuid, name, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Email    string
	Password string
	Name     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Name)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const emailExists = `-- name: EmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = $1)
`

func (q *Queries) EmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, emailExists, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT uuid, name, email, password, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT uuid, name, email, password, created_at, updated_at
FROM users
WHERE users.uuid = $1
`

func (q *Queries) GetUserByID(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, argUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPasswordByID = `-- name: GetUserPasswordByID :one
SELECT password
FROM users
WHERE uuid = $1
`

func (q *Queries) GetUserPasswordByID(ctx context.Context, argUuid uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPasswordByID, argUuid)
	var password string
	err := row.Scan(&password)
	return password, err
}

const listUsers = `-- name: ListUsers :many
SELECT uuid, name, email, created_at, updated_at
FROM users
WHERE
    CASE
        WHEN $1::text IS NOT NULL THEN
            (name ILIKE '%' || $1::text || '%' OR
             email ILIKE '%' || $1::text || '%')
        ELSE TRUE
        END
ORDER BY created_at DESC
LIMIT $3::int
    OFFSET $2::int
`

type ListUsersParams struct {
	Search sql.NullString
	Offset sql.NullInt32
	Limit  sql.NullInt32
}

type ListUsersRow struct {
	Uuid      uuid.UUID
	Name      string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserByID = `-- name: RemoveUserByID :one
DELETE
FROM users
WHERE uuid = $1
RETURNING uuid, name, email, password, created_at, updated_at
`

func (q *Queries) RemoveUserByID(ctx context.Context, argUuid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, removeUserByID, argUuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserByUUID = `-- name: UpdateUserByUUID :exec
UPDATE users
SET
    name   = COALESCE($2, name),
    email = COALESCE($3, email),
    updated_at = NOW()
WHERE uuid = $1
`

type UpdateUserByUUIDParams struct {
	Uuid  uuid.UUID
	Name  sql.NullString
	Email sql.NullString
}

func (q *Queries) UpdateUserByUUID(ctx context.Context, arg UpdateUserByUUIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByUUID, arg.Uuid, arg.Name, arg.Email)
	return err
}
