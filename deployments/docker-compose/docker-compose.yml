version: '3.8'

services:
  psql:
    hostname: "primary"
    image: postgres:latest
    container_name: backend-challenge-db
    user: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_ROOT_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - backend-challenge

  rabbitmq:
    image: rabbitmq:3.7-management
    container_name: backend-challenge-rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - backend-challenge

  mailcatcher:
    container_name: backend-challenge-mailcatcher
    image: schickling/mailcatcher
    ports:
      - "1080:1080"    # Web UI
      - "1025:1025"    # SMTP port
    networks:
      - backend-challenge

  migrate:
    image: migrate/migrate
    volumes:
      - type: bind
        source: ../../../../internal/infra/database/migrations
        target: /migrations
    command: [ "-path", "/migrations", "-database", "postgres://postgres:postgres@psql:5432/postgres?sslmode=disable", "up" ]
    depends_on:
      psql:
        condition: service_healthy
    networks:
      - backend-challenge

volumes:
  db:
  rabbitmq_data:

networks:
  backend-challenge:
    driver: bridge